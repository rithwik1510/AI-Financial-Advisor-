      }
    } catch {
      try {
        if (attachedFiles.length > 0) {
          setAttachedFiles([])
          setMessages(m => [...m, { role: 'assistant', content: `PDF Q&A is not available with the current LLM provider. Please attach CSV/XLSX exports for accurate analytics.`, ts: Date.now() }])
        } else {
          const { answer } = await apiAsk(analytics ?? null, q, model)
        setMessages(m => {
          const copy = m.slice()
          const last = copy[copy.length - 1]
          if (last && last.role === 'assistant' && last.content === '') last.content = answer
          else copy.push({ role: 'assistant', content: answer, ts: Date.now() })
          return copy
        })
        }
      } catch {
        setMessages(m => [...m, { role: 'assistant', content: 'Could not reach the LLM provider. Check your API key (e.g., OPENAI_API_KEY) and try again.', ts: Date.now() }])
      }
    } finally {
      setBusy(false)
    }
  }

  return (
    <div className="h-full flex flex-col">
      {/* MappingWizardModal removed */}
      {analytics && dqScore !== null && (
        <div className={`mx-auto w-full max-w-3xl mt-3 px-3`}>
          <div className={`rounded-xl border px-4 py-2 text-sm ${dqScore < 70 ? 'border-red-800/60 bg-red-950/30 text-red-200' : dqScore < 90 ? 'border-amber-800/60 bg-amber-950/30 text-amber-200' : 'border-emerald-800/60 bg-emerald-950/30 text-emerald-200'}`}>
            Data Quality: {dqScore}/100. {dqScore < 70 ? 'Consider using CSV/XLSX exports for more reliable analytics.' : 'Looks good.'}
          </div>
        </div>
      )}
      {msgs.length > 0 ? (
        <div className="flex-1 overflow-y-auto py-6" ref={el=>{scrollRef.current=el}} onScroll={(e)=>{
          const el = e.currentTarget
          const nearBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 120
          setShowJump(!nearBottom)
        }}>
          <div className="space-y-6">
            {msgs.map((m, idx) => (
              <div key={idx} className="px-2 animate-fade-in">
                {m.role === 'user' ? (
                  <div className="mx-auto max-w-3xl text-right">
                    {editingIdx === idx ? (
                      <div className="inline-block bg-gradient-to-br from-purple-600 to-fuchsia-600 text-white px-4 py-3 rounded-2xl shadow-md shadow-purple-900/30 w-full max-w-2xl text-left">
                        <textarea className="w-full bg-transparent outline-none resize-vertical" rows={3} value={editDraft} onChange={e => setEditDraft(e.target.value)} />
                        <div className="mt-2 flex gap-2 justify-end text-xs">
                          <button onClick={() => saveAndResend(idx)} className="px-3 py-1 rounded bg-white/20 hover:bg-white/30">Save & Resend</button>
                          <button onClick={cancelEdit} className="px-3 py-1 rounded bg-white/10 hover:bg-white/20">Cancel</button>
                        </div>
                      </div>
                    ) : (
                      <div className="inline-block bg-gradient-to-br from-purple-600 to-fuchsia-600 text-white px-4 py-2 rounded-2xl shadow-md shadow-purple-900/30 transition-transform">
                        {m.content}
                        <div className="mt-1 text-[11px] opacity-80 select-none text-right">
                          <button onClick={() => startEdit(idx)} className="underline decoration-white/30 hover:decoration-white mr-3">Edit</button>
                          <button onClick={() => quickResend(idx)} className="underline decoration-white/30 hover:decoration-white">Resend</button>
                        </div>
                        <div className="mt-1 text-[11px] opacity-80 select-none text-right">{m.ts ? new Date(m.ts).toLocaleTimeString() : ''}</div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="mx-auto max-w-3xl">
                    {m.toolResults && (
                      <div className="px-2 py-2">
                        <ToolResultsCardAdv
                          index={idx}
                          results={m.toolResults}
                          missing={m.toolMissing || []}
                          analytics={analytics}
                          onUpdate={(i, newRes) => setMessages(prev => { const copy = prev.slice(); const msg = copy[i]; if (msg) msg.toolResults = { ...msg.toolResults, ...newRes }; return copy })}
                        />
                      </div>
                    )}
                    <div className="group/message relative">
                      <div className="whitespace-pre-wrap leading-relaxed text-zinc-100 px-2 py-2">
                        {m.content && m.content.length > 0 ? m.content : (busy && m.role==='assistant' && idx === msgs.length - 1 ? <TypingDots /> : null)}
                      </div>
                      <div className="px-2 pb-2 text-xs text-zinc-500">{m.ts ? new Date(m.ts).toLocaleTimeString() : ''}</div>
                      <div className="absolute right-2 top-1 opacity-0 group-hover/message:opacity-100 transition text-xs flex gap-2">
                        <button className="px-2 py-1 rounded bg-zinc-900/70 border border-zinc-800 hover:bg-zinc-800 text-zinc-200" onClick={() => { try { navigator.clipboard.writeText(m.content || '') } catch {} }}>Copy</button>
                        <button className="px-2 py-1 rounded bg-zinc-900/70 border border-zinc-800 hover:bg-zinc-800 text-zinc-200" onClick={() => setInput(prev => (prev ? prev + "\n> " + (m.content||'') : "> " + (m.content||'')))}>Quote</button>
                        {(() => {
                          // regenerate using the previous user message
                          let prevUserIdx = -1
                          for (let j = idx - 1; j >= 0; j--) { if (msgs[j]?.role === 'user') { prevUserIdx = j; break } }
                          return prevUserIdx >= 0 ? (
                            <button className="px-2 py-1 rounded bg-gradient-to-br from-purple-700 to-fuchsia-700 hover:from-purple-600 hover:to-fuchsia-600 text-white"
                              onClick={() => resendWithText(prevUserIdx, msgs[prevUserIdx].content)}>
                              Regenerate
                            </button>
                          ) : null
                        })()}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
            {busy && (msgs.length === 0 || msgs[msgs.length-1]?.role === 'user') && (
              <div className="px-2 animate-fade-in">
                <div className="mx-auto max-w-3xl">
                  <div className="whitespace-pre-wrap leading-relaxed text-zinc-100 px-2 py-2">
                    <TypingDots />
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div className="flex-1 pt-16">
          <div className="text-center px-4">
            <h2 className="text-2xl font-semibold text-zinc-200">What can I help you with today?</h2>
            <p className="mt-3 text-sm text-zinc-400">Attach statements below. For charts and monthly breakdowns, CSV/XLSX exports give the most accurate results. PDF Q&A is not available in this build.</p>
            <div className="mt-4 flex flex-wrap gap-2 justify-center text-sm">
              {[
                'Can I afford a $400k home at 6.5% with $20k down?',
                'Help me cut $200/month from discretionary spend.',
                'What are my top 5 recurring expenses?',
                'How is my savings rate trending over the last 6 months?'
              ].map((s, i) => (
                <button key={i} onClick={() => setInput(s)} className="px-3 py-1.5 rounded-full border border-zinc-800/60 hover:border-zinc-700 bg-zinc-900/30 text-zinc-200">{s}</button>
              ))}
            </div>
          </div>
          <div className="mt-8 px-4">
            <div className="max-w-3xl mx-auto relative group">
              <input
                className="w-full rounded-full bg-zinc-950/70 backdrop-blur border border-zinc-800 px-5 pr-28 py-4 text-zinc-100 placeholder:text-zinc-500 shadow-inner focus:outline-none focus:ring-2 focus:ring-purple-600 transition-all hover:shadow-[0_0_30px_-12px_rgba(168,85,247,0.45)]"
                placeholder="Ask a question about your finances..."
                value={input}
                onChange={e => { setInput(e.target.value); saveDraft(e.target.value) }}
                onKeyDown={e => e.key==='Enter' && send()}
                disabled={busy}
              />
              <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
                <button
                  onClick={() => fileRef.current?.click()}
                  disabled={busy}
                  className="p-2 rounded-full text-zinc-300 hover:text-fuchsia-400 transition transform hover:scale-110 hover:shadow-[0_0_20px_rgba(216,180,254,0.35)]"
                  aria-label="Attach files"
                >
                  <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21 12.5L12.5 21C10 23.5 6 23.5 3.5 21C1 18.5 1 14.5 3.5 12L12 3.5C13.5 2 16 2 17.5 3.5C19 5 19 7.5 17.5 9L9 17.5C8 18.5 6.5 18.5 5.5 17.5C4.5 16.5 4.5 15 5.5 14L13 6.5" stroke="currentColor" strokeWidth="1.6" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
                <button
                  onClick={send}
                  disabled={busy}
                  className="p-2 rounded-full text-white bg-gradient-to-br from-purple-600 to-fuchsia-600 hover:from-purple-500 hover:to-fuchsia-500 transition transform hover:scale-110 shadow-lg shadow-purple-900/30"
                  aria-label="Send"
                >
                  <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4 12L20 4L12 20L11 13L4 12Z" fill="currentColor"/>
                  </svg>
                </button>
              </div>
              <input ref={fileRef} type="file" multiple className="hidden" accept=".pdf,.csv,.xlsx,.xls" onChange={(e) => attach(e.target.files)} />
            </div>
          </div>
        </div>
      )}

      {showJump && (
        <div className="fixed bottom-24 left-1/2 -translate-x-1/2">
          <button onClick={()=>{ const el = scrollRef.current; if (el) el.scrollTo({ top: el.scrollHeight, behavior: 'smooth' }) }}
                  className="px-3 py-1.5 rounded-full bg-gradient-to-br from-purple-700 to-fuchsia-700 text-white shadow-lg shadow-purple-900/30">
            Jump to latest
          </button>
        </div>
      )}

      {msgs.length > 0 && (
        <div className={`mt-2 flex gap-2 items-center max-w-3xl mx-auto w-full sticky bottom-4 px-2 composer ${dragOver ? 'ring-2 ring-fuchsia-600/50 rounded-2xl' : ''}`}
             onDragOver={(e)=>{e.preventDefault(); setDragOver(true)}} onDragEnter={(e)=>{e.preventDefault(); setDragOver(true)}} onDragLeave={()=>setDragOver(false)} onDrop={(e)=>{e.preventDefault(); setDragOver(false); attach(e.dataTransfer.files)}}>
          <input ref={fileRef} type="file" multiple className="hidden" accept=".pdf,.csv,.xlsx,.xls" onChange={(e) => attach(e.target.files)} />
          <button className="px-3 py-2 rounded-2xl bg-gradient-to-br from-purple-700 to-fuchsia-700 hover:from-purple-600 hover:to-fuchsia-600 text-white shadow-lg shadow-purple-900/30 disabled:opacity-50 transition-all" onClick={() => fileRef.current?.click()} disabled={busy}>Attach</button>
          {attachedFiles.length > 0 && (
            <div className="flex flex-wrap gap-2 max-w-[55%]">
              {attachedFiles.map((f, i) => (
                <div key={i} className="flex items-center gap-2 px-2 py-1 rounded-xl border border-zinc-800 bg-zinc-900 text-xs text-zinc-200">
                  <span className="text-fuchsia-300">PDF</span>
                  <span className="truncate max-w-[160px]" title={f.name}>{f.name}</span>
                  <span className="text-zinc-500">{Math.round(f.size/1024/1024)}MB</span>
                  <button className="text-zinc-400 hover:text-zinc-200" onClick={()=> setAttachedFiles(prev => prev.filter((_, idx)=>idx!==i))}>×</button>
                </div>
              ))}
            </div>
          )}
          <input className="flex-1 border border-zinc-800 bg-zinc-950/80 backdrop-blur text-zinc-100 rounded-2xl px-4 py-3 disabled:bg-zinc-800 placeholder:text-zinc-500 shadow-inner focus:outline-none focus:ring-2 focus:ring-purple-600 transition-all" placeholder="Message your coach..." value={input} onChange={e => { setInput(e.target.value); saveDraft(e.target.value) }} onKeyDown={e => { if (e.key==='Enter' && !e.shiftKey) { e.preventDefault(); send() } }} disabled={busy} />
          <button className="bg-gradient-to-br from-purple-600 to-fuchsia-600 hover:from-purple-500 hover:to-fuchsia-500 text-white px-5 py-3 rounded-2xl disabled:opacity-50 shadow-lg shadow-purple-900/30 transition-all" onClick={send} disabled={busy}>{busy ? 'Sending...' : 'Send'}</button>
        </div>
      )}
    </div>
  )
}
